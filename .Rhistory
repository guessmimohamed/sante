stat_summary(fun.data = fun_mean, geom="text", vjust=-0.5) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2)+
ggtitle("Medical charges by  BMI")})
output$plot_rg<-renderPlot({ggplot(data = insurance1, aes(x=region, y=charges)) +
geom_boxplot(fill = c(6:9))+
ggtitle("Medical charges per region")})
output$plot_sx<-renderPlot({fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=sex, y=charges)) +
geom_boxplot(aes(fill=sex))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2) +
ggtitle("Medical charges based on sex")})
output$plot_en<-renderPlot({fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=factor(children), y=charges)) +
geom_boxplot(aes(fill=children))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2)+
ggtitle("Medical charges by  children")})
output$plot_sk<-renderPlot({
fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=smoker, y=charges)) +
geom_boxplot(fill = c(6:7))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2) +
ggtitle("Medical charges per smoking")})
output$plot_rl<-renderPlot({
train_id=sample(1000,input$sd1)
data_train=insurance1[train_id,]
data_test=insurance1[-train_id,]
##model RL:
lm.fit2 <- lm(charges ~ age +sex + bmi + children + smoker + region + obesity + obesity * smoker , data=data_train)
summary(lm.fit2)
data_test$predict <- predict(lm.fit2, newdata=data_test)
prob_train=predict(lm.fit2,data_train,type = "response")
pred_train=prediction(prob_train,data_train$charges)
perf_roc_train=performance(pred_train,measure = "tpr",x.measure ="fpr")
auc_train=performance(pred_train,measure="auc")
prob_test=predict(lm.fit2,data_test,type = "response")
pred_test=prediction(prob_test,data_test$charges)
perf_roc_test=performance(pred_test,measure = "tpr",x.measure ="fpr")
auc_test=performance(pred_test,measure="auc")
#plot:
plot(perf_roc_train,col="red",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
par(new=TRUE)
plot(perf_roc_test,col="green",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
precision=abs(auc_test@y.values[[1]]/auc_train@y.values[[1]])*100
text(x=0.9,y=0.3,paste("Precision = ",round(precision,digits = 3)),col ="blue")
text(x=0.9,y=0.2,paste("auc(train)=",round(auc_train@y.values[[1]],digits = 3)),col ="red")
text(x=0.9,y=0.1,paste("auc(test)=",round(auc_test@y.values[[1]],digits = 3)),col ="green")
})
#####Plot Arbre:
output$plot_ar<-renderPlot({
train_id=sample(1000,input$sd2)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
##Decision tree:
mycontrol = rpart.control(cp = 0, xval = 10)
model_ar <- rpart(charge~ .,method = "class" ,control = mycontrol, data=data_train)
prob_train_ar=predict(model_ar,data_train,type = "prob")[,2]
pred_train_ar=prediction(prob_train_ar,data_train$charge)
perf_roc_train_ar=performance(pred_train_ar,measure = "tpr",x.measure ="fpr")
auc_train_ar=performance(pred_train_ar,measure="auc")
prob_test_ar=predict(model_ar,data_test,type = "prob")[,2]
pred_test_ar=prediction(prob_test_ar,data_test$charge)
perf_roc_test_ar=performance(pred_test_ar,measure = "tpr",x.measure ="fpr")
auc_test_ar=performance(pred_test_ar,measure="auc")
#plot:
plot(perf_roc_train_ar,col="red",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
par(new=TRUE)
plot(perf_roc_test_ar,col="green",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
precision_ar=abs(auc_test_ar@y.values[[1]]/auc_train_ar@y.values[[1]])*100
text(x=0.9,y=0.3,paste("Precision = ",round(precision_ar,digits = 3)),col ="blue")
text(x=0.9,y=0.2,paste("auc(train)=",round(auc_train_ar@y.values[[1]],digits = 3)),col ="red")
text(x=0.9,y=0.1,paste("auc(test)=",round(auc_test_ar@y.values[[1]],digits = 3)),col ="green")})
output$arbre<-renderPlot({
train_id=sample(1000,input$sd2)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
##Decision tree:
mycontrol = rpart.control(cp = 0, xval = 10)
model_ar <- rpart(charge~ .,method = "class" ,control = mycontrol, data=data_train)
#plot tree
prp(model_ar,type=2,extra=1)})
output$tab1<-renderText({
train_id=sample(1000,input$sd2)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
mycontrol = rpart.control(cp = 0, xval = 10)
model_ar <- rpart(charge~ .,method = "class" ,control = mycontrol, data=data_train)
summary(model_ar)})
##### RN :
output$plot_rn<-renderPlot({
train_id=sample(1338,input$sd3)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
Neural<- nnet(charge~ .,data = data_train,size=10,maxit=500,decay=.001, linout=F, trace = F)
fitNeural_train <- predict(Neural,
newdata=data_train)
prednn_train = prediction( fitNeural_train, data_train$charge)
perfnn_train <- performance(prednn_train, "tpr", "fpr")
auc_train_nn=performance(prednn_train,measure="auc")
auc_train_nn
fitNeural <- predict(Neural,
newdata=data_test)
prednn = prediction( fitNeural, data_test$charge)
perfnn <- performance(prednn, "tpr", "fpr")
auc_test_nn=performance(prednn,measure="auc")
auc_test_nn
plot(perfnn_train,col="red",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
par(new=TRUE)
plot(perfnn,col="green",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
text(x=0.9,y=0.2,paste("auc(train)=",round(auc_train_nn@y.values[[1]],digits = 3)),col ="red")
text(x=0.9,y=0.1,paste("auc(test)=",round(auc_test_nn@y.values[[1]],digits = 3)),col ="green")
})
output$plotnn<-renderPlot({
train_id=sample(1338,input$sd3)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
Neural<- nnet(charge~ .,data = data_train,size=10,maxit=500,decay=.001, linout=F, trace = F)
plot.nnet(Neural,col = "red")
})
observe({
if (input$quit == 1) stopApp()
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(dashboardthemes)
library(readxl)
library(ggplot2)
library(dplyr)
library(plotly)
library(corrplot)
library(ROCR)
library(pROC)
library(rpart)
library(rpart.plot)
library(nnet)
library(NeuralNetTools)
library(kableExtra)
library(knitr)
library(devtools)
library(reshape)
library(reshape2)
library(stringdist)
library(sp)
library(shapefiles)
library(raster)
library(magrittr)
library(datasets)
library(maptools)
library(WVPlots)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
source('moduleChangeTheme.R')
insurance1 <- read.csv("insurance.csv")
insurance1$obesity <- ifelse(insurance1$bmi > 30, "yes", "no")
insurance<-insurance1
insurance$charge <- ifelse(insurance$charges > median(insurance$charges), 1, 0)
insurance<-insurance[,-7]
ui <- dashboardPage(
dashboardHeader(title = "Charges ",
tags$li(class = "dropdown",
tags$a(href = "https://www.linkedin.com/in/daghbouji-mohamed-326432131/",
target = "_blank",
tags$img(height = "30px",
src = "man/linkedin.png")
)
),
tags$li(a(href = 'https://github.com/guessmimohamed',
img(src = 'man/git.png',
title = "github", height = "30px")
),
class = "dropdown"),
tags$li(a(actionButton(inputId = "quit",
icon("power-off"),
title = "Back to Apps Home",height = "30px")),
class = "dropdown")),
dashboardSidebar(
sidebarMenu(
menuItem("Themes", tabName = "Themes", icon = icon("images")),
menuItem("Introduction", tabName = "Introduction", icon = icon("outdent")),
menuItem("Visualisation", tabName = "Visualisation", icon = icon("poll")
),
menuItem("ML", tabName = "ML", icon = icon("chart-line"),
menuSubItem("Prédiction", tabName = "prediction",icon = icon("wallet")),
menuSubItem("Régression linéaire ", tabName = "RL",icon = icon("external-link-square-alt")),
menuSubItem("Arbre de decision", tabName = "Arbre",icon = icon("sliders-h")),
menuSubItem("Reseau de neurones", tabName = "Reseau",icon = icon("project-diagram"))
),
menuItem("Contact",tabName = "Contact",icon = icon("id-card"))
)
),
dashboardBody(
uiChangeThemeOutput(),
tabItems(
# Tab content -------------------------------------------------------------
tabItem(
tabName = "Themes",
fluidRow(
column(
width = 12,
# Theme drop-down ---------------------------------------------------------
uiChangeThemeDropdown(dropDownLabel = "THEME ", defaultTheme = "poor_mans_flatly")
))),
# First tab content
tabItem(tabName = "Introduction",box(title = "Introduction",
status = "info",solidHeader = TRUE,collapsible = TRUE,width = 10 ,
h4("les agences d'assurance devraient percevoir une prime plus élevée que le montant payé à la personne assurée.
Pour cette raison, les compagnies d'assurance investissent beaucoup de temps,
d'efforts et d'argent dans la création de modèles qui prédisent avec précision les coûts des soins de santé.
J'utiliserai les données fournies dans l'ensemble de données personnelles sur les coûts médicaux pour explorer les facteurs personnels importants pour prédire les coûts médicaux,
puis j'effectuerai une analyse par des méthodes de machine learning"))
),
tabItem(tabName = "Contact", infoBox("profil", strong("
Guessmi Mohamed"), icon = icon("user-alt"),fill=TRUE,color="olive"), fluidRow(
# A static infoBox
infoBox("Email", strong("
daghboujimohamed4@gmail.com"), icon = icon("credit-card"),fill=TRUE,color="red")
)),
tabItem(tabName = "prediction",
fluidPage(
fluidRow(column(3,
textInput("age", h3("Age"),
value = "Enter text...")),
column(3,
textInput("bmi", h3("BMI"),
value = "Enter text...")),
column(3,
textInput("ch", h3("Enfant"),
value = "Enter text...")),
column(3,
selectInput("smo", h3("Fumeur"),
choices = list("yes" , "no"
), selected = 1)),
column(3,
selectInput("ss", h3("Sexe"),
choices = list("male" , "female"
), selected = 1)),
column(3,
selectInput("ob", h3("Obesité"),
choices = list("yes" , "no"
), selected = 1)),
column(3,
selectInput("reg", h3("Région"),
choices = list("northwest" , "northeast","southeast","southwest"
), selected = 1)),
column(3,selectInput(inputId = "type",
label = h3("Méthode"),
choices = list("Régression linéaire",
"Arbre de decision",
"Reseau de neurones" )
)),
column(10,
h3("Valider"),
actionButton("go", "Submit") , br(),br(),
fluidRow(infoBox(textOutput("pred"), icon = icon("donate"),fill=TRUE,color = "maroon",width = 10)))
)
) ),
tabItem(tabName ="RL",mainPanel(
tabBox(type="pills",
tabPanel(title = "Resumé",
sidebarPanel(sliderInput("sd1",label = "Choisir la taille du base du train",
min = 0,max = 1000,value = 750)),tableOutput("resum"),
infoBox(" R carré = ",textOutput("txt"), icon = icon("check"),fill=TRUE,color = "aqua",width = 4)),
tabPanel(title ="Gini score",width = 600,height = 600,sidebarPanel(sliderInput("sd0",label = "Choisir la taille du base du train",
min = 0,max = 1000,value = 750)),
plotOutput("plot_rll",width = 900,height = 600))
,width = 2000,height = 700 ))
),
tabItem(tabName ="Visualisation",
fluidPage(
mainPanel(
tabBox(type="pills",width = 8,tabPanel(title =strong("Région"),width = 600,height = 600,plotOutput("plot_rg",width = 900,height = 600)),
tabPanel(title =strong("Sexe"),width = 600,height = 600,plotOutput("plot_sx",width = 900,height = 600)),
tabPanel(title =strong("BMI"),width = 600,height = 600,plotOutput("plot_bmi",width = 900,height = 600)),
tabPanel(title =strong("Enfant"),width = 600,height = 600,plotOutput("plot_en",width = 900,height = 600)),
tabPanel(plotOutput("plot_sk",width = 900,height = 600),width = 900,height = 600,title = strong("Fumeur"))
))
) ),
tabItem(tabName ="Arbre",
fluidPage(
mainPanel(
tabBox(type="pills",tabPanel(title ="ROC: Arbre de decision",width = 600,height = 600,plotOutput("plot_ar",width = 900,height = 600)),
tabPanel(plotOutput("arbre",width = 600,height = 600),width = 900,height = 600,title = "PLOT")
)),
sidebarPanel(sliderInput("sd2",label = "Choisir la taille de la base pour le train",
min = 0,max = 1000,value = 750))
) ),
tabItem(tabName ="Reseau",
fluidPage(
mainPanel(
tabBox(type="pills",tabPanel(title ="ROC: Reseau de neurones",width = 600,height = 600,plotOutput("plot_rn",width = 900,height = 600)),
tabPanel(plotOutput("plotnn",width = 1000,height = 700),width = 900,height = 600,title = "PLOT")
)),
sidebarPanel(sliderInput("sd3",label = "Choisir la taille de la base pour le train",
min = 0,max = 1000,value = 750))
))
)
))
server <- function(input, output) {
# Changing theme ----------------------------------------------------------
callModule(module = serverChangeTheme, id = "moduleChangeTheme")
###### RL
output$resum<-renderTable({
train_id=sample(1000,input$sd1)
data_train=insurance1[train_id,]
data_test=insurance1[-train_id,]
lm.fit2 <- lm(charges ~ age +sex + bmi + children + smoker + region + obesity + obesity * smoker , data=data_train)
summary(lm.fit2)$coefficients
},striped = TRUE,bordered = TRUE,rownames = TRUE,spacing = "xs")
output$txt<-renderText({
train_id=sample(1000,input$sd1)
data_train=insurance1[train_id,]
data_test=insurance1[-train_id,]
lm.fit2 <- lm(charges ~ age +sex + bmi + children + smoker + region + obesity + obesity * smoker , data=data_train)
data_test$predict <- predict(lm.fit2, newdata=data_test)
rss <- sum((data_test$predict - data_test$charges)^2)
tss <- sum((data_test$charges - mean(data_test$charges))^2)
(rsq = 1- (rss/tss))
rsq
})
ntext <- eventReactive(input$go, {
A <- data.frame(age = as.numeric(input$age),
bmi = as.numeric(input$bmi),
children = as.numeric(input$ch),
smoker = input$smo,
sex=input$ss,
obesity=input$ob,
region = input$reg)
if(input$type == "Régression linéaire" ) {
print(paste0(" Frais de soins de santé pour ce profil :  ", round(predict(lm.fit2, A), 2)," $"))
} else if(input$type == "Arbre de decision") {
if(predict(model_ar, A,type ="class")==1 ){
print(paste0(" Frais de soins de santé pour ce profil sont supérieure a 10000$/an  "))}
else {print(paste0(" Frais de soins de santé pour ce profil sont inférieur a 10000$/an  "))}
}else {
if( predict(Neural, A, type = c("raw","class"))>0.5 ){
print(paste0(" Frais de soins de santé pour ce profil sont supérieure a 10000$/an  "))}
else {print(paste0(" Frais de soins de santé pour ce profil sont inférieur a 10000$/an  "))}
}
})
output$pred<-renderText({
ntext()
})
output$plot_rll<-renderPlot({
train_id=sample(1000,input$sd0)
data_train=insurance1[train_id,]
data_test=insurance1[-train_id,]
lm.fit2 <- lm(charges ~ age +sex + bmi + children + smoker + region + obesity + obesity * smoker , data= data_train)
data_test$predict <- predict(lm.fit2, newdata=data_test)
GainCurvePlot(data_test, "predict", "charges", "lm.fit2")
})
output$plot_bmi<-renderPlot({fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=obesity, y=charges)) +
geom_boxplot(aes(fill=obesity))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=5) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.5) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2)+
ggtitle("Medical charges by  BMI")})
output$plot_rg<-renderPlot({ggplot(data = insurance1, aes(x=region, y=charges)) +
geom_boxplot(fill = c(6:9))+
ggtitle("Medical charges per region")})
output$plot_sx<-renderPlot({fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=sex, y=charges)) +
geom_boxplot(aes(fill=sex))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2) +
ggtitle("Medical charges based on sex")})
output$plot_en<-renderPlot({fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=factor(children), y=charges)) +
geom_boxplot(aes(fill=children))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2)+
ggtitle("Medical charges by  children")})
output$plot_sk<-renderPlot({
fun_mean <- function(x){
return (round((data.frame(y=mean(x),label=mean(x,na.rm=T))),2))}
ggplot(data = insurance1, aes(x=smoker, y=charges)) +
geom_boxplot(fill = c(6:7))+
stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) +
stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7) +
geom_hline(aes(yintercept=mean(charges, na.rm=T)), colour = "red", linetype="dashed", size=2) +
ggtitle("Medical charges per smoking")})
output$plot_rl<-renderPlot({
train_id=sample(1000,input$sd1)
data_train=insurance1[train_id,]
data_test=insurance1[-train_id,]
##model RL:
lm.fit2 <- lm(charges ~ age +sex + bmi + children + smoker + region + obesity + obesity * smoker , data=data_train)
summary(lm.fit2)
data_test$predict <- predict(lm.fit2, newdata=data_test)
prob_train=predict(lm.fit2,data_train,type = "response")
pred_train=prediction(prob_train,data_train$charges)
perf_roc_train=performance(pred_train,measure = "tpr",x.measure ="fpr")
auc_train=performance(pred_train,measure="auc")
prob_test=predict(lm.fit2,data_test,type = "response")
pred_test=prediction(prob_test,data_test$charges)
perf_roc_test=performance(pred_test,measure = "tpr",x.measure ="fpr")
auc_test=performance(pred_test,measure="auc")
#plot:
plot(perf_roc_train,col="red",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
par(new=TRUE)
plot(perf_roc_test,col="green",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
precision=abs(auc_test@y.values[[1]]/auc_train@y.values[[1]])*100
text(x=0.9,y=0.3,paste("Precision = ",round(precision,digits = 3)),col ="blue")
text(x=0.9,y=0.2,paste("auc(train)=",round(auc_train@y.values[[1]],digits = 3)),col ="red")
text(x=0.9,y=0.1,paste("auc(test)=",round(auc_test@y.values[[1]],digits = 3)),col ="green")
})
#####Plot Arbre:
output$plot_ar<-renderPlot({
train_id=sample(1000,input$sd2)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
##Decision tree:
mycontrol = rpart.control(cp = 0, xval = 10)
model_ar <- rpart(charge~ .,method = "class" ,control = mycontrol, data=data_train)
prob_train_ar=predict(model_ar,data_train,type = "prob")[,2]
pred_train_ar=prediction(prob_train_ar,data_train$charge)
perf_roc_train_ar=performance(pred_train_ar,measure = "tpr",x.measure ="fpr")
auc_train_ar=performance(pred_train_ar,measure="auc")
prob_test_ar=predict(model_ar,data_test,type = "prob")[,2]
pred_test_ar=prediction(prob_test_ar,data_test$charge)
perf_roc_test_ar=performance(pred_test_ar,measure = "tpr",x.measure ="fpr")
auc_test_ar=performance(pred_test_ar,measure="auc")
#plot:
plot(perf_roc_train_ar,col="red",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
par(new=TRUE)
plot(perf_roc_test_ar,col="green",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
precision_ar=abs(auc_test_ar@y.values[[1]]/auc_train_ar@y.values[[1]])*100
text(x=0.9,y=0.3,paste("Precision = ",round(precision_ar,digits = 3)),col ="blue")
text(x=0.9,y=0.2,paste("auc(train)=",round(auc_train_ar@y.values[[1]],digits = 3)),col ="red")
text(x=0.9,y=0.1,paste("auc(test)=",round(auc_test_ar@y.values[[1]],digits = 3)),col ="green")})
output$arbre<-renderPlot({
train_id=sample(1000,input$sd2)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
##Decision tree:
mycontrol = rpart.control(cp = 0, xval = 10)
model_ar <- rpart(charge~ .,method = "class" ,control = mycontrol, data=data_train)
#plot tree
prp(model_ar,type=2,extra=1)})
output$tab1<-renderText({
train_id=sample(1000,input$sd2)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
mycontrol = rpart.control(cp = 0, xval = 10)
model_ar <- rpart(charge~ .,method = "class" ,control = mycontrol, data=data_train)
summary(model_ar)})
##### RN :
output$plot_rn<-renderPlot({
train_id=sample(1338,input$sd3)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
Neural<- nnet(charge~ .,data = data_train,size=10,maxit=500,decay=.001, linout=F, trace = F)
fitNeural_train <- predict(Neural,
newdata=data_train)
prednn_train = prediction( fitNeural_train, data_train$charge)
perfnn_train <- performance(prednn_train, "tpr", "fpr")
auc_train_nn=performance(prednn_train,measure="auc")
auc_train_nn
fitNeural <- predict(Neural,
newdata=data_test)
prednn = prediction( fitNeural, data_test$charge)
perfnn <- performance(prednn, "tpr", "fpr")
auc_test_nn=performance(prednn,measure="auc")
auc_test_nn
plot(perfnn_train,col="red",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
par(new=TRUE)
plot(perfnn,col="green",print.cutoffs.at=seq(0,1,by=0.25),lwd=3)
abline(0,1,lty=3)
text(x=0.9,y=0.2,paste("auc(train)=",round(auc_train_nn@y.values[[1]],digits = 3)),col ="red")
text(x=0.9,y=0.1,paste("auc(test)=",round(auc_test_nn@y.values[[1]],digits = 3)),col ="green")
})
output$plotnn<-renderPlot({
train_id=sample(1338,input$sd3)
data_train=insurance[train_id,]
data_test=insurance[-train_id,]
Neural<- nnet(charge~ .,data = data_train,size=10,maxit=500,decay=.001, linout=F, trace = F)
plot.nnet(Neural,col = "red")
})
observe({
if (input$quit == 1) stopApp()
})
}
shiny::shinyApp(ui, server)
library(sante)
ins()
